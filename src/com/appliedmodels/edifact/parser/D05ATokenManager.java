/* Generated By:JavaCC: Do not edit this line. D05ATokenManager.java */
package com.appliedmodels.edifact.parser;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.helpers.AttributesImpl;

/** Token Manager. */
public class D05ATokenManager implements D05AConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0x1ffffL) != 0L)
         {
            jjmatchedKind = 273;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0x1ffffL) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 275);
      case 42:
         return jjStopAtPos(0, 278);
      case 43:
         return jjStopAtPos(0, 276);
      case 58:
         return jjStopAtPos(0, 277);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x3ffc0L, 0x0L, 0x0L, 0xff0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x3c0000L, 0x0L, 0x0L, 0x3000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0xfffffc00000L, 0x0L, 0x0L, 0x1fc000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1fff00000000000L, 0x0L, 0x0L, 0x1e00000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xfe00000000000000L, 0x1fL, 0x0L, 0x2000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe0L, 0x0L, 0x1c000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff000L, 0x0L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000L, 0x0L, 0xe0000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fc00000L, 0x0L, 0x1f00000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000000L, 0x0L, 0x6000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc00000000L, 0x0L, 0x78000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000000000L, 0x0L, 0x380000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3c00000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffffc0000000000L, 0x0L, 0x1ffc000000000000L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000000000000L, 0x0L, 0x2000000000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffL, 0xc000000000000000L, 0x1fL);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fff00L, 0x0L, 0xe0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff800000L, 0x0L, 0xff00L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfffffffc00000000L, 0xfL, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L, 0x0L, 0x10000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000440000L, active1, 0x1f0080100000L, active2, 0x800100L, active3, 0x88000200010L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000L, active1, 0xe00000400020L, active2, 0x7c01000601L, active3, 0x4000000100001000L, active4, 0x100L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000e000040L, active1, 0x1000000801000L, active2, 0x2000000L, active3, 0x4c000e0000060L, active4, 0x220L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x2000c00002000L, active2, 0x4003802L, active3, 0x10000000000L, active4, 0x10040L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200000000000L, active1, 0x1000000L, active2, 0x4004L, active3, 0x8000000200000000L, active4, 0x400L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000080080L, active1, 0x4000000000000L, active2, 0x18000018000L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800020100000L, active1, 0x800010001c040L, active2, 0x3e0000000000L, active3, 0x400000L, active4, 0x1800L);
      case 74:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x38060000c0000600L, active1, 0L, active2, 0x200000000L, active3, 0x8000000006080L, active4, 0x1L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x4008000100000000L, active1, 0x4000000L, active2, 0x18000000L, active3, 0x10100000008000L, active4, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0x10000038000180L, active2, 0x7fc00000000010L, active3, 0x4000830000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x10003800000000L, active1, 0x20002200020200L, active2, 0x20000020L, active3, 0xe0020000040000L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000001800L, active1, 0x40000L, active2, 0x40060000L, active3, 0x100L, active4, 0x2L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x3L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000006000L, active1, 0x11c000004008000cL, active2, 0x80000000L, active3, 0xf0100000e080000L, active4, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0020000008000L, active1, 0x200004000000400L, active2, 0xff80000100000040L, active3, 0x100004000000020fL, active4, 0x80L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x100040000010000L, active1, 0x2400008000000800L, active2, 0x780080L, active3, 0x2002001c11000c00L, active4, 0xcL);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000220000L, active1, 0x4000000000000000L, active2, 0L, active3, 0x200000100000L, active4, 0x10L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000010L, active2, 0L, active3, 0L, active4, 0x4000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000200000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 10);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 10);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 10);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 10);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 10);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 10);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 115, 10);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 10);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 126, 10);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 147, 10);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 183, 10);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 235, 10);
         break;
      case 66:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 169, 10);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 174, 10);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 184, 10);
         break;
      case 67:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 10);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 10);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 10);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 10);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 10);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 106, 10);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 10);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 117, 10);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 10);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 137, 10);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 148, 10);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 152, 10);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 185, 10);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 226, 10);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 258, 10);
         break;
      case 68:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 10);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 10);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 10);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 10);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 10);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 10);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 10);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 10);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 10);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 10);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 10);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 10);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 10);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 10);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 121, 10);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 133, 10);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 138, 10);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 155, 10);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 157, 10);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 162, 10);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 186, 10);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 200, 10);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 201, 10);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 204, 10);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 227, 10);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 234, 10);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 248, 10);
         break;
      case 69:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 10);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 10);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 135, 10);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 175, 10);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 187, 10);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 236, 10);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 249, 10);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 264, 10);
         break;
      case 70:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 130, 10);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 163, 10);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 188, 10);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 266, 10);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 267, 10);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 269, 10);
         break;
      case 71:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 10);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 10);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 132, 10);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 139, 10);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 10);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 176, 10);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 230, 10);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 240, 10);
         break;
      case 72:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 167, 10);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 170, 10);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 177, 10);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 189, 10);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 272, 10);
         break;
      case 73:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 10);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 10);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 10);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 10);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 10);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 10);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 10);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 10);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 10);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 10);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 10);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 10);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 10);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 10);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 10);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 10);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 112, 10);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 10);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 119, 10);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 142, 10);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 161, 10);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 164, 10);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 196, 10);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 197, 10);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 202, 10);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 205, 10);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 211, 10);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 216, 10);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 217, 10);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 220, 10);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 221, 10);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 224, 10);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 238, 10);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 241, 10);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 243, 10);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 252, 10);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 253, 10);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 254, 10);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 257, 10);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 259, 10);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 265, 10);
         break;
      case 76:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 129, 10);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 131, 10);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 134, 10);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 136, 10);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 140, 10);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 158, 10);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 190, 10);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 260, 10);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 270, 10);
         break;
      case 77:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 10);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 10);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 10);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 10);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 10);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 10);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 10);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 10);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 154, 10);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 165, 10);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 218, 10);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 228, 10);
         break;
      case 78:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 10);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 10);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 10);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 10);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 10);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 10);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 10);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 10);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 207, 10);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 210, 10);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 237, 10);
         break;
      case 79:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 10);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 178, 10);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 250, 10);
         break;
      case 80:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 10);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 10);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 10);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 10);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 10);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 10);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 156, 10);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 179, 10);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 229, 10);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 231, 10);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 245, 10);
         break;
      case 81:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 10);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 10);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 141, 10);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 219, 10);
         break;
      case 82:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 10);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 10);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 10);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 10);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 10);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 10);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 10);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 10);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 127, 10);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 145, 10);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 160, 10);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 171, 10);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 191, 10);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 203, 10);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 10);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 222, 10);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 246, 10);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 255, 10);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 262, 10);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 263, 10);
         break;
      case 83:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 10);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 10);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 10);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 10);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 10);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 10);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 10);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 10);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 10);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 108, 10);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 124, 10);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 128, 10);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 146, 10);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 150, 10);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 166, 10);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 180, 10);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 198, 10);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 199, 10);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 214, 10);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 223, 10);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 232, 10);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 239, 10);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 247, 10);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 256, 10);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 271, 10);
         break;
      case 84:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 10);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 10);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 10);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 10);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 10);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 10);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 10);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 10);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 10);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 10);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 123, 10);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 153, 10);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 168, 10);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 172, 10);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 181, 10);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 192, 10);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 206, 10);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 215, 10);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 225, 10);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 242, 10);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 244, 10);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 251, 10);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 261, 10);
         break;
      case 85:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 10);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 10);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 144, 10);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 159, 10);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 193, 10);
         break;
      case 86:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 10);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 10);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 10);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 10);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 10);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 213, 10);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 233, 10);
         break;
      case 88:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 10);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 10);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 151, 10);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 194, 10);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 208, 10);
         break;
      case 89:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 122, 10);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 125, 10);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 195, 10);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 209, 10);
         break;
      case 90:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 173, 10);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 182, 10);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 268, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7bfff37effffc9ffL & l) != 0L)
                  {
                     if (kind > 273)
                        kind = 273;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 63)
                     jjCheckNAddStates(0, 4);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 274)
                        kind = 274;
                     jjCheckNAdd(8);
                  }
                  break;
               case 10:
                  if ((0x7bfff37fffffffffL & l) != 0L)
                  {
                     if (kind > 273)
                        kind = 273;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 63)
                     jjCheckNAddStates(0, 4);
                  break;
               case 1:
                  if ((0x7bfff37fffffffffL & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 63)
                     jjCheckNAddStates(0, 4);
                  break;
               case 3:
                  if (curChar != 63)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 4:
                  if (curChar != 39)
                     break;
                  kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 5:
                  if (curChar != 43)
                     break;
                  kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 6:
                  if (curChar != 58)
                     break;
                  kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 7:
                  if (curChar != 42)
                     break;
                  kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 274)
                     kind = 274;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 63)
                     jjCheckNAddStates(0, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 10:
               case 1:
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 10:
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   3, 4, 5, 6, 7, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\101\104\122", "\101\107\122", 
"\101\112\124", "\101\114\103", "\101\114\111", "\101\120\120", "\101\120\122", 
"\101\122\104", "\101\122\122", "\101\123\111", "\101\124\124", "\101\125\124", 
"\102\101\123", "\102\107\115", "\102\111\111", "\102\125\123", "\103\101\126", 
"\103\103\104", "\103\103\111", "\103\104\111", "\103\104\123", "\103\104\126", 
"\103\105\104", "\103\111\116", "\103\114\101", "\103\114\111", "\103\115\120", 
"\103\116\111", "\103\116\124", "\103\117\104", "\103\117\115", "\103\117\124", 
"\103\120\111", "\103\120\123", "\103\120\124", "\103\123\124", "\103\124\101", 
"\103\125\130", "\104\101\115", "\104\106\116", "\104\107\123", "\104\111\111", 
"\104\111\115", "\104\114\111", "\104\114\115", "\104\115\123", "\104\117\103", 
"\104\122\104", "\104\123\107", "\104\123\111", "\104\124\115", "\105\104\124", 
"\105\106\111", "\105\114\115", "\105\114\125", "\105\114\126", "\105\115\120", 
"\105\121\101", "\105\121\104", "\105\121\116", "\105\122\103", "\105\122\120", 
"\105\126\105", "\106\103\101", "\106\111\111", "\106\116\123", "\106\116\124", 
"\106\117\122", "\106\123\121", "\106\124\130", "\107\104\123", "\107\105\111", 
"\107\111\104", "\107\111\116", "\107\111\122", "\107\117\122", "\107\120\117", 
"\107\122\125", "\110\101\116", "\110\131\116", "\111\103\104", "\111\104\105", 
"\111\106\104", "\111\110\103", "\111\115\104", "\111\116\104", "\111\116\120", 
"\111\116\126", "\111\122\121", "\114\101\116", "\114\111\116", "\114\117\103", 
"\115\105\101", "\115\105\115", "\115\113\123", "\115\117\101", "\115\123\107", 
"\115\124\104", "\116\101\104", "\116\101\124", "\120\101\103", "\120\101\111", 
"\120\101\123", "\120\103\103", "\120\103\104", "\120\103\111", "\120\104\111", 
"\120\105\122", "\120\107\111", "\120\111\101", "\120\116\101", "\120\117\103", 
"\120\122\103", "\120\122\111", "\120\122\126", "\120\123\104", "\120\124\131", 
"\120\131\124", "\121\122\123", "\121\124\131", "\121\125\101", "\121\126\122", 
"\122\103\123", "\122\105\114", "\122\106\106", "\122\112\114", "\122\116\107", 
"\122\117\104", "\122\123\114", "\122\124\105", "\123\101\114", "\123\103\103", 
"\123\103\104", "\123\105\107", "\123\105\114", "\123\105\121", "\123\106\111", 
"\123\107\120", "\123\107\125", "\123\120\122", "\123\120\123", "\123\124\101", 
"\123\124\103", "\123\124\107", "\123\124\123", "\124\101\130", "\124\103\103", 
"\124\104\124", "\124\105\115", "\124\115\104", "\124\115\120", "\124\117\104", 
"\124\120\114", "\124\122\125", "\124\123\122", "\126\114\111", "\125\103\104", 
"\125\103\106", "\125\103\111", "\125\103\115", "\125\103\123", "\125\107\110", 
"\125\107\124", "\125\111\102", "\125\111\110", "\125\111\122", "\125\111\124", 
"\125\111\132", "\125\116\102", "\125\116\105", "\125\116\107", "\125\116\110", 
"\125\116\117", "\125\116\120", "\125\116\123", "\125\116\124", "\125\116\132", 
"\125\123\101", "\125\123\102", "\125\123\103", "\125\123\104", "\125\123\105", 
"\125\123\106", "\125\123\110", "\125\123\114", "\125\123\122", "\125\123\124", 
"\125\123\125", "\125\123\130", "\125\123\131", "\101\101\111", "\101\104\111", 
"\101\104\123", "\101\114\123", "\101\120\104", "\101\123\104", "\101\124\111", 
"\101\124\122", "\102\103\104", "\102\114\111", "\103\114\124", "\103\115\116", 
"\103\116\130", "\103\116\131", "\103\117\116", "\103\122\111", "\103\125\122", 
"\104\101\126", "\104\111\123", "\104\116\124", "\104\124\111", "\105\122\111", 
"\106\122\115", "\106\122\121", "\106\124\111", "\110\104\111", "\110\104\122", 
"\110\104\123", "\111\103\111", "\111\106\124", "\111\124\103", "\111\124\104", 
"\111\124\115", "\114\113\120", "\114\116\107", "\115\101\120", "\115\105\123", 
"\115\117\126", "\115\123\104", "\116\101\101", "\116\115\105", "\116\125\116", 
"\117\104\111", "\117\104\123", "\117\122\107", "\117\124\111", "\120\104\124", 
"\120\114\111", "\120\115\124", "\120\117\120", "\120\117\122", "\120\117\123", 
"\120\122\104", "\120\122\105", "\120\122\117", "\120\122\124", "\120\123\111", 
"\121\124\111", "\122\103\111", "\122\106\122", "\122\114\123", "\122\120\111", 
"\122\124\103", "\122\124\111", "\122\125\114", "\123\104\124", "\123\105\122", 
"\123\123\122", "\124\103\105", "\124\104\111", "\124\106\106", "\124\111\106", 
"\124\111\132", "\124\122\106", "\124\126\114", "\124\130\123", "\126\105\110", null, null, 
"\47", "\53", "\72", "\52", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x7fffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[10];
private final int[] jjstateSet = new int[20];
protected char curChar;
/** Constructor. */
public D05ATokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public D05ATokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 10; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
